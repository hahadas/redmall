<template>
	<div @touchmove.stop.prevent="tapMask">
		<view class="zz" :class="showMask ? 'show' : 'hide'" :style="{top: statusBarHeight + 100 + 'px'}" @tap="tapMask"></view>
		<view class="wrapper">
			<view 
				class="c-flex-align" 
				:style="{width: (710 / navData.length) + 'rpx'}"
				v-for="(item, index) in navData" :key="index" @click="navClick(index)">
			   <text class="nav-txt" :class="{'actNav': index === actNav}" v-for="(child, childx) in item" :key="childx" v-if="child.select">{{ child.text }}</text>
			   <image :src="staticUrl + 'video/down.png'" mode="" class="icon-triangle" v-if="index === actNav"></image>
			   <image :src="staticUrl + 'video/up.png'" mode="" class="icon-triangle" v-else></image>
			</view>
		</view>
		<view class="popup popupShow" v-if="popupShow" :style="{top: statusBarHeight + 100 + 'px' }">
			<view class="item-opt" v-for="(item, index) in navData[actNav]" :key="index" @click="handleOpt(index)">
				<view class="between">
					<text :class="item.select ? 'actOpt' : 'item-opt-txt'">{{ item.text }}</text>
					<image :src="staticUrl + 'video/select.png'" v-if="item.select" class="item-opt-icon"></image>
				</view>
			</view>
		</view>
		
	</div>
</template>

<script>
	export default {
		props: {
			filterData: {
			    //必填
			    type: Array,
			    default: () => {
			        return [];
			    }
			},
			defaultIndex: {
			    //默认选中条件索引,超出一类时必填
			    type: Array,
			    default: () => {
			        return [0];
			    }
			},
			statusBarHeight: {
				type: Number,
				default: 0
			}
		},
		data() {
		    return {
				staticUrl: this.$staticUrl,
				swiperHeight: uni.getSystemInfoSync().windowHeight,
		        navData: [],
		        popupShow: false,
		        showMask: false,
		        actNav: null,
		        selIndex: [] //选中条件索引
		    };
		},
		created() {
		    this.navData = this.filterData;
		    this.selIndex = this.defaultIndex;
		    this.keepStatus();
		},
		methods: {
			keepStatus() {
			    this.navData.forEach(itemnavData => {
			        itemnavData.map(child => {
			            child.select = false;
			        });
			        return itemnavData;
			    });
			    for (let i = 0; i < this.selIndex.length; i++) {
			        let selindex = this.selIndex[i];
			        this.navData[i][selindex].select = true;
			    }
			},
			navClick(index) {
			    if (index === this.actNav) {
			        this.tapMask();
			    } else {
					this.showMask = true;
					this.popupShow = true;
					this.actNav = index;
				}
			},
			handleOpt(index) {
			    this.selIndex[this.actNav] = index;
			    this.keepStatus();
			    setTimeout(() => {
			        this.tapMask();
			    }, 100);
			    let data = [];
			    let res = this.navData.forEach(item => {
			        let sel = item.filter(child => child.select);
			        data.push(sel[0].value);
			    });
			    this.$emit('onSelected', data);
			},
			tapMask() {
			    this.showMask = false;
			    this.popupShow = false;
			    this.actNav = null;
			}
		}
	}
</script>

<style scoped>
	.wrapper{
		position: relative;
		z-index: 99;
		width: 750rpx;
		height: 100rpx;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
		background-color: #fff;
		border-bottom-color: #f5f6f9;
		border-bottom-width: 2rpx;
	}
	.c-flex-align{
		align-items: center;
		justify-content: center;
		flex-direction: row;
	}
	.zz {
		position: fixed;
		z-index: 666;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0, 0, 0, 0.4);
	}
	.show {
		background-color: rgba(0, 0, 0, 0.4);
	}
	.hide{
		position: relative;
		display: none;
	}
	.nav-txt{
		font-size: 30rpx;
	}
	.actNav {
		color: #381895;
	}
	.icon-triangle {
		width: 26rpx;
		height: 26rpx;
		margin-left: 10rpx;
	}
	.popup{
		position: fixed;
		z-index: 9999;
		left: 0;
		right: 0;
		max-height: 500rpx;
		background-color: #fff;
		border-bottom-left-radius: 20rpx;
		border-bottom-right-radius: 20rpx;
		overflow-y: scroll;
		transition: all 1s linear;
		opacity: 0;
		display: none;
	}
	.popupShow {
		display: block;
		opacity: 1;
	}
	.item-opt {
		height: 100rpx;
		padding: 0 40rpx;
		border-top-color: #f5f6f9;
		border-top-width: 2rpx;
	}
	.between{
		align-items: center;
		flex-direction: row;
		justify-content: space-between;
	}
	.item-opt-txt{
		color: #666666;
		font-size: 30rpx;
		line-height: 100rpx;
	}
	.actOpt {
		line-height: 100rpx;
		font-size: 30rpx;
		width: 500rpx;
		color: #381895;
		font-weight: bold;
	}
	.item-opt-icon{
		width: 36rpx;
		height: 36rpx;
	}
</style>
